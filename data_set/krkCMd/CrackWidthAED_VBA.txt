Sub CrackWidthAED_VBA()' This VBA macro allows to assess crack width by an analytical procedure, on the basis of locating points on either side of a global minimum brightness degree from the ROI on the surface image of the specimen[1,2,3].' This is an illustrative script and benchmark data, for possible comparisons with user's own models. The macro requires a specific set of input data arranged in a worksheet.' [1] Jakubowski, J. & Tomczak, K. Deposition of data for developing deep learning models to assess crack width and self-healing progress in concrete (krkCMd). Zenodo doi: 10.5281/zenodo.11408398 (2024)' [2] Jakubowski, J. & Tomczak, K. Deep learning metasensor for crack-width assessment and self-healing evaluation in concrete. Constr. Build. Mater. 422, 135768 (2024).' [3] Tomczak, K., Jakubowski, J. & Fiołek, P. Method for Assessment of Changes in the Width of Cracks in Cement Composites with Use of Computer Image Processing and Analysis. Stud. Geotech. Mech. 39, 73–80 (2017)' This work is licensed under CC BY 4.0 Dim wb As WorkbookDim ws As WorksheetDim k, resolution, accuracy, step, brightness_increment As IntegerDim y_upper, y_lower, j_upper, j_lower, j_max_upper, j_max_lower, i, j As IntegerDim min_brightness, delta_upper, delta_lower, extr_upper, extr_lower, increment, max_increment, rel_increment_threshold As Doublek = InputBox("Enter the number of images in the stack (number of time points)", , 6) ' Variable indicating the number of images in the stackresolution = InputBox("Enter the scanning resolution (in dpi)", , 6400) ' Variable indicating the scanning resolutionaccuracy = 5 ' Possible brightness deviation when searching for the area with the global minimumstep = 10 ' Value indicating how many rows to move from the current position to search for the brightness incrementbrightness_increment = 5 ' Maximum brightness change between points spaced by &step when searching for the local maximumrel_increment_threshold = 0 ' Value of the maximum relative brightness increment to stop searching for the maximum brightness increment (searching for points near the local maximum)Set ws = ActiveSheetSheets(ws.Name).Cells.Interior.Pattern = xlNone  ' Clear cell fill color throughout the worksheeti = 2 ' Variable representing the initial row number in the data sheet with brightness valuesDo While Sheets(ws.Name).Cells(i, 1).Value <> ""j = 7 ' Variable representing the initial column number in the data sheet with brightness valuesIf ((i - 2) Mod k) = 0 Then    min_brightness = Application.WorksheetFunction.min(Range(Sheets(ws.Name).Cells(i, j), Sheets(ws.Name).Cells(i, j + 500)))    Do While Sheets(ws.Name).Cells(i, j).Value <> min_brightness  ' Loop searching for the first cell with the global minimum        j = j + 1    Loop    Do Until Sheets(ws.Name).Cells(i, j - 1).Value - min_brightness > accuracy ' Loop searching for the cell with the global minimum with specified accuracy        j = j - 1    Loop    y_upper = j        Do Until Sheets(ws.Name).Cells(i, j + 1).Value - min_brightness > accuracy ' Loop searching for the gap width represented by multiple global minima        j = j + 1    Loop    y_lower = j        delta_upper = Sheets(ws.Name).Cells(i, y_upper - step - 1).Value - Sheets(ws.Name).Cells(i, y_upper - 1).Value    j_upper = y_upper - 1    Do Until delta_upper <= brightness_increment Or j_upper - step = 2 ' Loop searching for approximate location of the local maximum before the global minimum using increment comparisons        delta_upper = Sheets(ws.Name).Cells(i, j_upper - step).Value - Sheets(ws.Name).Cells(i, j_upper).Value        j_upper = j_upper - 1    Loop    extr_upper = Application.WorksheetFunction.Max(Range(Sheets(ws.Name).Cells(i, j_upper - step), Sheets(ws.Name).Cells(i, j_upper)))    Do Until Sheets(ws.Name).Cells(i, j_upper).Value = extr_upper ' Loop searching for the exact location of the local maximum before the global minimum in the previously determined subarea        j_upper = j_upper - 1    Loop        delta_lower = Sheets(ws.Name).Cells(i, y_lower + step).Value - Sheets(ws.Name).Cells(i, y_lower).Value    j_lower = y_lower + 1    Do Until delta_lower <= brightness_increment Or j_lower + step = 507 ' Loop searching for approximate location of the local maximum after the global minimum using increment comparisons        delta_lower = Sheets(ws.Name).Cells(i, j_lower + step).Value - Sheets(ws.Name).Cells(i, j_lower).Value        j_lower = j_lower + 1    Loop    extr_lower = Application.WorksheetFunction.Max(Range(Sheets(ws.Name).Cells(i, j_lower), Sheets(ws.Name).Cells(i, j_lower + step)))    Do Until Sheets(ws.Name).Cells(i, j_lower).Value = extr_lower ' Loop searching for the exact location of the local maximum after the global minimum in the previously determined subarea        j_lower = j_lower + 1    Loop        j_max_lower = y_lower + 1    max_increment = 0    temp_flag = 0    Do        delta_lower = Sheets(ws.Name).Cells(i, j_max_lower + step).Value - Sheets(ws.Name).Cells(i, j_max_lower).Value        increment = delta_lower / step        If max_increment < increment Then            max_increment = increment            j_max_upper = j_max_lower            temp_flag = 1        Else            If increment <= rel_increment_threshold And temp_flag = 0 Then                max_increment = increment                j_max_upper = y_lower + 1                temp_flag = 1            End If        End If        j_max_lower = j_max_lower + 1    Loop Until increment <= rel_increment_threshold Or j_lower + step = 507 ' Loop searching for approximate location of the local maximum using maximum increments        Sheets(ws.Name).Cells(i, 510).Value = (y_lower - y_upper + 1) * 25.4 / resolution * 1000 ' Cell displays the crack width in micrometersElse    lpe = 0    Dim local_extreme_points(50)    Erase local_extreme_points    g = 0    For j = j_upper To j_lower ' Determine the number of local extreme points        prev_lpe = lpe        If Sheets(ws.Name).Cells(i, j + 0.5 * step).Value - Sheets(ws.Name).Cells(i, j).Value <= 0 And Sheets(ws.Name).Cells(i, j + 0.5 * step + 1).Value - Sheets(ws.Name).Cells(i, j + 1).Value > 0 Then            lpe = lpe + 1            If lpe - prev_lpe > 0 Then                local_extreme_points(g) = Application.WorksheetFunction.min(Range(Sheets(ws.Name).Cells(i, j), Sheets(ws.Name).Cells(i, j + 0.5 * step)))                g = g + 1            End If        End If        If Sheets(ws.Name).Cells(i, j + 0.5 * step).Value - Sheets(ws.Name).Cells(i, j).Value >= 0 And Sheets(ws.Name).Cells(i, j + 0.5 * step).Value - Sheets(ws.Name).Cells(i, j + 1).Value < 0 Then            lpe = lpe + 1            If lpe - prev_lpe > 0 Then                local_extreme_points(g) = Application.WorksheetFunction.Max(Range(Sheets(ws.Name).Cells(i, j), Sheets(ws.Name).Cells(i, j + 0.5 * step + 1)))                g = g + 1            End If        End If    Next j        j = j_upper    min_inner = Application.WorksheetFunction.min(Range(Sheets(ws.Name).Cells(i, j_upper), Sheets(ws.Name).Cells(i, j_lower)))    Do While Sheets(ws.Name).Cells(i, j).Value <> min_inner  ' Loop searching for the first cell with the local minimum        j = j + 1    Loop    Sheets(ws.Name).Cells(i, j).Interior.ColorIndex = 3    Do Until Sheets(ws.Name).Cells(i, j - 1).Value - min_inner > accuracy Or j - 2 < j_upper ' Loop searching for the cell with the global minimum with specified accuracy within the range        j = j - 1        Sheets(ws.Name).Cells(i, j).Interior.ColorIndex = 3    Loop    y_upper_inner = j        Do Until Sheets(ws.Name).Cells(i, j + 1).Value - min_inner > accuracy Or j + 2 > j_lower ' Loop searching for the crack width represented by multiple local minima of brightness        j = j + 1        Sheets(ws.Name).Cells(i, j).Interior.ColorIndex = 3    Loop    y_lower_inner = j        'Declaration of conditions equivalent to the occurrence of crack filling state    i1 = i - ((i - 2) Mod k)    max1_upper = Sheets(ws.Name).Cells(i1, j_upper).Value    max1_lower = Sheets(ws.Name).Cells(i1, j_lower).Value    max_upper = Sheets(ws.Name).Cells(i, j_upper).Value    max_lower = Sheets(ws.Name).Cells(i, j_lower).Value    CrackWidth0 = False        If lpe = 0 And Sheets(ws.Name).Cells(i, y_upper_inner).Value >= max1_upper And Sheets(ws.Name).Cells(i, y_lower_inner).Value >= max1_lower Then        CrackWidth0 = True    ElseIf lpe = 0 And (Sheets(ws.Name).Cells(i, y_upper_inner).Value < max1_upper Or Sheets(ws.Name).Cells(i, y_lower_inner).Value < max1_lower) _        And Application.WorksheetFunction.Average(Range(Sheets(ws.Name).Cells(i, j_upper), Sheets(ws.Name).Cells(i, j_lower))) > (max1_upper + max1_lower) / 2 Then            CrackWidth0 = True    ElseIf lpe = 1 And Sheets(ws.Name).Cells(i, y_upper_inner).Value >= max1_upper And Sheets(ws.Name).Cells(i, y_lower_inner).Value >= max1_lower _        And local_extreme_points(0) <> Null And local_extreme_points(0) > max1_upper And local_extreme_points(0) > max1_lower Then            CrackWidth0 = True    ElseIf lpe = 1 And (Sheets(ws.Name).Cells(i, y_upper_inner).Value < max1_upper Or Sheets(ws.Name).Cells(i, y_lower_inner).Value >= max1_lower) _        And local_extreme_points(0) <> Null And local_extreme_points(0) > max_upper And local_extreme_points(0) > max_lower _        And Application.WorksheetFunction.Average(Range(Sheets(ws.Name).Cells(i, j_upper), Sheets(ws.Name).Cells(i, j_lower))) > (max1_upper + max1_lower) / 2 Then            CrackWidth0 = True    ElseIf lpe >= 1 And Application.WorksheetFunction.Average(Range(Sheets(ws.Name).Cells(i, j_upper), Sheets(ws.Name).Cells(i, j_lower))) > (max_upper + max_lower) / 2 _        And Application.WorksheetFunction.Max(local_extreme_points) - Application.WorksheetFunction.min(local_extreme_points) < 100 Then        CrackWidth0 = True    Else        ' Calculate the crack width in other cases    Range(Sheets(ws.Name).Cells(i, j_upper - 1), Sheets(ws.Name).Cells(i, j_lower + 1)).Interior.Pattern = xlNone        If lpe = 0 Or (lpe = 1 And local_extreme_points(0) <> Null And local_extreme_points(0) > Sheets(ws.Name).Cells(i, j_upper).Value _    And local_extreme_points(0) > Sheets(ws.Name).Cells(i, j_lower).Value) Then        min_inner = Application.WorksheetFunction.min(local_extreme_points)    End If        j = j_upper    Do While Sheets(ws.Name).Cells(i, j).Value <> min_inner  ' Loop to find the first cell with the local minimum        j = j + 1    Loop    Do Until Sheets(ws.Name).Cells(i, j - 1).Value - min_inner > accuracy Or j - 2 < j_upper ' Loop to find the global minimum cell with specified accuracy within the range        j = j - 1    Loop    y_upper_inner = j        Do Until Sheets(ws.Name).Cells(i, j + 1).Value - min_inner > accuracy Or j + 2 > j_lower ' Loop to find the crack width represented by multiple local minima of brightness        j = j + 1    Loop    y_lower_inner = j       End If        If CrackWidth0 = True Then        Sheets(ws.Name).Cells(i, 510).Value = 0    Else        Sheets(ws.Name).Cells(i, 510).Value = (y_lower_inner - y_upper_inner + 1) * 25.4 / resolution * 1000  ' Output the crack width in micrometers within the specified range    End IfEnd If    i = i + 1LoopEnd Sub